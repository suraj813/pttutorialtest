.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_beginner_tensor_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_tensor_tutorial.py:


Tensors
--------------------------------------------

Tensors are a specialized data structure that are very similar to arrays
and matrices. In PyTorch, we use tensors to encode the inputs and
outputs of a model, as well as the model’s parameters.

Tensors are similar to NumPy’s ndarrays, except that tensors can run on
GPUs or other specialized hardware to accelerate computing. If you’re familiar with ndarrays, you’ll
be right at home with the Tensor API. If not, follow along in this quick
API walkthrough.



.. code-block:: default


    import torch
    import numpy as np








Tensor Initialization
~~~~~~~~~~~~~~~~~~~~~

Tensors can be initialized in various ways. Take a look at the following examples

**Directly from data**
Tensors can be created directly from data. The data type is automatically inferred.


.. code-block:: default


    data = [[1, 2],[3, 4]]
    x_data = torch.tensor(data)







**From a NumPy array**
Tensors can be created from NumPy arrays (and vice versa - see :ref:`bridge-to-np-label`).


.. code-block:: default

    np_array = np.array(data)
    x_np = torch.from_numpy(np_array)








**From another tensor:**
The new tensor retains the properties (shape, datatype) of the arg tensor, unless explicitly overridden.


.. code-block:: default


    x_ones = torch.ones_like(x_data) # 2 x 2 matrix of ones

    x_rand = torch.rand_like(x_data, dtype=torch.float)
    print(x_rand)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[0.2613, 0.8315],
            [0.7869, 0.6000]])


**With random or constant values:**

``shape`` is a tuple of tensor dimensions. In the functions below, it determines the dimensionality of the output tensor.


.. code-block:: default


    shape = (2,3,)
    rand_tensor = torch.rand(shape)
    ones_tensor = torch.ones(shape)
    zeros_tensor = torch.zeros(shape)
    print(f"Random Tensor:\n{rand_tensor}\n")
    print(f"Ones Tensor:\n{ones_tensor}\n")
    print(f"Zeros Tensor:\n{zeros_tensor}")








.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Random Tensor:
    tensor([[0.6370, 0.7918, 0.1659],
            [0.7907, 0.9453, 0.0484]])

    Ones Tensor:
    tensor([[1., 1., 1.],
            [1., 1., 1.]])

    Zeros Tensor:
    tensor([[0., 0., 0.],
            [0., 0., 0.]])


--------------


Tensor Attributes
~~~~~~~~~~~~~~~~~

Tensor attributes describe their shape, datatype, and the device on which they are stored.


.. code-block:: default


    tensor = torch.rand(3,4)

    print(f"Shape of tensor: {tensor.shape}")
    print(f"Datatype of tensor: {tensor.dtype}")
    print(f"Device tensor lives on: {tensor.device}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Shape of tensor: torch.Size([3, 4])
    Datatype of tensor: torch.float32
    Device tensor lives on: cpu


--------------


Tensor Operations
~~~~~~~~~~~~~~~~~

Over 100 tensor operations, including transposing, indexing, slicing,
mathematical operations, linear algebra, random sampling, and more are
comprehensively described
`here <https://pytorch.org/docs/stable/torch.html>`__.

Each of them can be run on the GPU (at typically higher speeds than on a
CPU). If you’re using Colab, allocate a GPU by going to Edit > Notebook
Settings.



.. code-block:: default


    # We move our tensor to the GPU if available
    if torch.cuda.is_available():
      tensor = tensor.to('cuda')








Try out some of the operations from the list.
If you're familiar with the NumPy API, you'll find the Tensor API a breeze to use.


**Standard numpy-like indexing and slicing:**


.. code-block:: default


    tensor = torch.ones(4, 4)
    tensor[:,1] = 0
    print(tensor)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.]])


**Joining tensors** You can use ``torch.cat`` to concatenate a sequence of tensors along a given dimension.
See also `torch.stack <https://pytorch.org/docs/stable/generated/torch.stack.html>`__,
another tensor joining op that is subtly different from ``torch.cat``.


.. code-block:: default

    t1 = torch.cat([tensor, tensor, tensor], dim=1)
    print(t1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
            [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
            [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
            [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.]])


**Multiplying tensors**


.. code-block:: default


    # This computes the element-wise product
    print(tensor.mul(tensor))
    # Alternative syntax:
    print(tensor * tensor)

    # This computes the matrix multiplication between two tensors
    print(tensor.matmul(tensor.T))
    # Alternative syntax:
    print(tensor @ tensor.T)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.]])
    tensor([[1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.]])
    tensor([[3., 3., 3., 3.],
            [3., 3., 3., 3.],
            [3., 3., 3., 3.],
            [3., 3., 3., 3.]])
    tensor([[3., 3., 3., 3.],
            [3., 3., 3., 3.],
            [3., 3., 3., 3.],
            [3., 3., 3., 3.]])


**In-place operations**
Operations that have a '_' suffix are in-place. For example: ``x.copy_(y)``, ``x.t_()``, will change ``x``.


.. code-block:: default


    print(tensor)
    tensor.add_(5)
    print(tensor)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.],
            [1., 0., 1., 1.]])
    tensor([[6., 5., 6., 6.],
            [6., 5., 6., 6.],
            [6., 5., 6., 6.],
            [6., 5., 6., 6.]])


.. note::
     In-place operations save some memory, but can be problematic when computing derivatives because of an immediate loss
     of history. Hence, their use is discouraged.

--------------


.. _bridge-to-np-label:

Bridge with NumPy
~~~~~~~~~~~~~~~~~
Tensors on the CPU and NumPy arrays can share their underlying memory
locations, and changing one will change	the other.

Tensor to NumPy array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default

    a = torch.ones(5)
    print(f"a: {a}")
    b = a.numpy()
    print(f"b: {b}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    a: tensor([1., 1., 1., 1., 1.])
    b: [1. 1. 1. 1. 1.]


A change in ``a`` reflects in ``b``


.. code-block:: default


    a.add_(1)
    print(f"a: {a}")
    print(f"b: {b}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    a: tensor([2., 2., 2., 2., 2.])
    b: [2. 2. 2. 2. 2.]


NumPy array to Tensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default

    a = np.ones(5)
    b = torch.from_numpy(a)
    np.add(a, 1, out=a)
    print(f"a: {a}")
    print(f"b: {b}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    a: [2. 2. 2. 2. 2.]
    b: tensor([2., 2., 2., 2., 2.], dtype=torch.float64)



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.062 seconds)


.. _sphx_glr_download_beginner_tensor_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tensor_tutorial.py <tensor_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tensor_tutorial.ipynb <tensor_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
